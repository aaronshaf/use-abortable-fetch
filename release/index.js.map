{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["import { useState, useEffect, useLayoutEffect, useRef } from 'react';\r\n\r\nimport { FetchState, AbortableFetchResult } from './types';\r\nimport fetchData from './fetchData';\r\n\r\nconst useAbortableFetch = <T>(\r\n  url: string | null,\r\n  init?: RequestInit\r\n): AbortableFetchResult<T> => {\r\n  const [state, setState] = useState<FetchState<T>>({\r\n    data: null,\r\n    loading: 0,\r\n    error: null,\r\n    controller: null\r\n  });\r\n\r\n  const isMounted = useRef(false);\r\n  useLayoutEffect(() => {\r\n    isMounted.current = true;\r\n    return () => {\r\n      isMounted.current = false;\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const controller = new AbortController();\r\n    if (url) {\r\n      // setState((oldState: FetchState<T>) => ({\r\n      //   data: null,\r\n      //   loading: oldState.loading + 1,\r\n      //   error: null,\r\n      //   controller\r\n      // }));\r\n      // fetchData<T>(url, init, controller.signal, state => {\r\n      //   if (isMounted.current) {\r\n      //     setState(state);\r\n      //   }\r\n      // });\r\n    }\r\n\r\n    return () => controller.abort();\r\n  }, [init, url]);\r\n\r\n  return {\r\n    data: state.data,\r\n    loading: !!state.loading,\r\n    error: state.error,\r\n    abort: () => state.controller && state.controller.abort()\r\n  };\r\n};\r\n\r\nexport default useAbortableFetch;\r\n"],"names":["url","init","useState","data","loading","error","controller","isMounted","useRef","useLayoutEffect","current","useEffect","AbortController","abort","state"],"mappings":"+CAMEA,EACAC,SAE0BC,WAAwB,CAChDC,KAAM,KACNC,QAAS,EACTC,MAAO,KACPC,WAAY,UAGRC,EAAYC,UAAO,UACzBC,oCACEF,EAAUG,SAAU,aAElBH,EAAUG,SAAU,IAErB,IAEHC,2BACQL,EAAa,IAAIM,yCAeVN,EAAWO,UACvB,CAACZ,EAAMD,IAEH,CACLG,KAAMW,EAAMX,KACZC,UAAWU,EAAMV,QACjBC,MAAOS,EAAMT,MACbQ,wBAAaC,EAAMR,YAAcQ,EAAMR,WAAWO"}