{"version":3,"file":"index.umd.js","sources":["../src/index.ts"],"sourcesContent":["import {\r\n  useState,\r\n  useEffect,\r\n  useLayoutEffect,\r\n  useRef,\r\n  Dispatch,\r\n  SetStateAction\r\n} from 'react';\r\n\r\nconst useAbortableFetch = <T>(\r\n  url: string | null,\r\n  init: RequestInit = {}\r\n): {\r\n  data: T | null;\r\n  loading: boolean;\r\n  error: Error | null;\r\n  abort: () => void;\r\n} => {\r\n  type FetchState = {\r\n    data: T | null;\r\n    loading: number;\r\n    error: null | Error;\r\n    controller: AbortController | null;\r\n  };\r\n\r\n  const fetchData = (\r\n    url: string,\r\n    init: RequestInit,\r\n    signal: AbortSignal,\r\n    setState: Dispatch<SetStateAction<FetchState>>\r\n  ) => {\r\n    const actualInit: RequestInit = { ...init, signal };\r\n\r\n    fetch(url, actualInit)\r\n      .then(rsp =>\r\n        rsp.ok\r\n          ? Promise.resolve(rsp)\r\n          : Promise.reject({\r\n              message: rsp.statusText,\r\n              status: rsp.status\r\n            })\r\n      )\r\n      .then(rsp => rsp.json())\r\n      .then(data => {\r\n        setState((oldState: FetchState) => ({\r\n          ...oldState,\r\n          data,\r\n          loading: oldState.loading - 1\r\n        }));\r\n      })\r\n      .catch((err: Error) => {\r\n        const error = err.name !== 'AbortError' ? err : null;\r\n\r\n        setState((oldState: FetchState) => ({\r\n          ...oldState,\r\n          error,\r\n          loading: oldState.loading - 1\r\n        }));\r\n      });\r\n  };\r\n\r\n  const [state, setState] = useState<FetchState>({\r\n    data: null,\r\n    loading: 0,\r\n    error: null,\r\n    controller: null\r\n  });\r\n\r\n  const isMounted = useRef(false);\r\n  useLayoutEffect(() => {\r\n    isMounted.current = true;\r\n    return () => {\r\n      isMounted.current = false;\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const controller = new AbortController();\r\n    if (url) {\r\n      setState((oldState: FetchState) => ({\r\n        data: null,\r\n        loading: oldState.loading + 1,\r\n        error: null,\r\n        controller\r\n      }));\r\n\r\n      fetchData(url, init, controller.signal, state => {\r\n        if (isMounted.current) {\r\n          setState(state);\r\n        }\r\n      });\r\n    }\r\n\r\n    return () => controller.abort();\r\n  }, [url]);\r\n\r\n  return {\r\n    data: state.data,\r\n    loading: !!state.loading,\r\n    error: state.error,\r\n    abort: () => state.controller && state.controller.abort()\r\n  };\r\n};\r\n\r\nexport default useAbortableFetch;\r\n"],"names":["url","init","useState","data","loading","error","controller","isMounted","useRef","useLayoutEffect","current","useEffect","AbortController","setState","oldState","signal","actualInit","Object","fetch","then","rsp","ok","Promise","resolve","reject","message","statusText","status","json","catch","err","name","fetchData","state","abort"],"mappings":"kOAUEA,EACAC,kBAAoB,UAkDMC,WAAqB,CAC7CC,KAAM,KACNC,QAAS,EACTC,MAAO,KACPC,WAAY,qBAGRC,EAAYC,UAAO,UACzBC,oCACEF,EAAUG,SAAU,aAElBH,EAAUG,SAAU,IAErB,IAEHC,2BACQL,EAAa,IAAIM,uBACnBZ,IACFa,WAAUC,UACRX,KAAM,KACNC,QAASU,EAASV,QAAU,EAC5BC,MAAO,gBACPC,cAzDJN,EACAC,EACAc,EACAF,OAEMG,EAA0BC,iBAAKhB,UAAMc,IAE3CG,MAAMlB,EAAKgB,GACRG,cAAKC,UACJA,EAAIC,GACAC,QAAQC,QAAQH,GAChBE,QAAQE,OAAO,CACbC,QAASL,EAAIM,WACbC,OAAQP,EAAIO,WAGnBR,cAAKC,UAAOA,EAAIQ,SAChBT,cAAKhB,GACJU,WAAUC,UAA0BG,iBAC/BH,QACHX,EACAC,QAASU,EAASV,QAAU,QAG/ByB,eAAOC,OACAzB,EAAqB,eAAbyB,EAAIC,KAAwBD,EAAM,KAEhDjB,WAAUC,UAA0BG,iBAC/BH,SACHT,EACAD,QAASU,EAASV,QAAU,QA8BhC4B,CAAUhC,EAAKC,EAAMK,EAAWS,gBAAQkB,GAClC1B,EAAUG,SACZG,EAASoB,wBAKF3B,EAAW4B,UACvB,CAAClC,IAEG,CACLG,KAAM8B,EAAM9B,KACZC,UAAW6B,EAAM7B,QACjBC,MAAO4B,EAAM5B,MACb6B,wBAAaD,EAAM3B,YAAc2B,EAAM3B,WAAW4B"}